package com.sms.controller;

import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.List;
import java.util.Scanner;

import com.sms.model.Course;
import com.sms.model.Fee;
import com.sms.model.Student;
import com.sms.payment.processor.PaymentProcessor;
import com.sms.service.FeeService;
import com.sms.service.StudentService;

public class StudentController {

	private StudentService studentService;
	private FeeService feeService;
	private Scanner scanner = new Scanner(System.in);

	public StudentController() throws SQLException {
		this.studentService = new StudentService();
		this.feeService = new FeeService();
	}

	// View All Students
	public void viewAllStudents() {
		List<Student> students = studentService.readAllStudent();
		if (students.isEmpty()) {
			System.out.println("No students found.");
			return;
		}

		Student.printHeader();
		for (Student student : students) {
			System.out.println(student);
		}
	}

	// Add New Student with Profile and Course Assignment
	public void addNewStudent() {
		scanner.nextLine(); // Consume leftover newline
		System.out.print("Enter Student Name: ");
		String name = scanner.nextLine();

		System.out.print("Enter GR Number: ");
		int grNumber = scanner.nextInt();

		System.out.print("Enter Email: ");
		String email = scanner.next();

		System.out.print("Enter City: ");
		String city = scanner.next();

		System.out.print("Enter Mobile No: ");
		String mobileNo = scanner.next();

		System.out.print("Enter Age: ");
		int age = scanner.nextInt();

		System.out.println("\nAvailable Courses:");
		List<Course> courses = studentService.getAllCourses();
		if (courses.isEmpty()) {
			System.out.println("No courses available. Please add a course first.");
			return;
		}

		printCourses(courses);

		System.out.print("Enter Course ID to assign: ");
		int courseId = scanner.nextInt();

		Student student = new Student();
		student.setName(name);
		student.setGr_number(grNumber);
		student.setEmail(email);
		student.setCity(city);
		student.setMobile_no(mobileNo);
		student.setAge(age);

		boolean success = studentService.addStudentWithProfileAndCourse(student, courseId);
		System.out.println(success ? "Student added and course assigned successfully."
				: "Failed to add student. Please try again.");
	}

	// Assign Course to Student
	public void assignCourse() {
		System.out.print("Enter Student ID to assign a course: ");
		int studentId = scanner.nextInt();

		Student student = studentService.searchStudentById(studentId);
		if (student == null) {
			System.out.println("Student not found with ID: " + studentId);
			return;
		}

		List<Course> courses = studentService.getAllCourses();
		if (courses.isEmpty()) {
			System.out.println("No courses available.");
			return;
		}

		System.out.println("\nAvailable Courses:");
		printCourses(courses);

		System.out.print("Enter Course ID to assign: ");
		int courseId = scanner.nextInt();

		boolean success = studentService.assignCourseToStudent(studentId, courseId);
		System.out.println(success ? "Course assigned successfully."
				: "Failed to assign course. It may already be assigned or invalid.");
	}

	// View All Courses by Student ID
	public void viewAllCourses() {
		System.out.print("Enter Student ID: ");
		int studentId = scanner.nextInt();

		List<Course> courses = studentService.readAllCourses(studentId);
		if (courses.isEmpty()) {
			System.out.println("No courses found for student ID: " + studentId);
			return;
		}

		System.out.println("\nCourses Assigned:");
		printCourses(courses);
	}

	// Search Student by ID
	public void searchStudent() {
		System.out.print("Enter Student ID to search: ");
		int studentId = scanner.nextInt();

		Student student = studentService.searchStudentById(studentId);
		if (student != null) {
			System.out.println("\nStudent Details:");
			Student.printHeader();
			System.out.println(student);
		} else {
			System.out.println("Student not found with ID: " + studentId);
		}
	}

	// Delete Student by ID
	public void deleteStudent() {
		System.out.print("Enter Student ID to delete: ");
		int studentId = scanner.nextInt();

		boolean deleted = studentService.deleteStudentById(studentId);
		System.out.println(deleted ? "Student and related data deleted successfully."
				: "Failed to delete. Check ID and try again.");
	}
	// 5. Pay Fees using new PaymentProcessor
	public void payFees() {
		System.out.println("\nüí∞ === FEES PAYMENT ===");

		// Show available students
		System.out.println("\nüìö Available Students:");
		List<Student> students = feeService.getAllStudents();
		if (students.isEmpty()) {
			System.out.println("No students found.");
			return;
		}

		printStudents(students);

		// Get student ID
		System.out.print("\nEnter Student ID to pay fees: ");
		if (!scanner.hasNextInt()) {
			System.out.println("‚ùó Please enter a valid Student ID.");
			scanner.next(); // clear invalid input
			return;
		}

		int studentId = scanner.nextInt();

		// Get student's fee details
		List<Fee> fees = feeService.getFeesByStudent(studentId);
		if (fees.isEmpty()) {
			System.out.println("No fees found for Student ID: " + studentId);
			return;
		}

		// Display current fee status
		System.out.println("\nüìä Current Fee Status for Student ID " + studentId + ":");
		Fee.printHeader();
		for (Fee fee : fees) {
			System.out.println(fee);
		}

		// Check if there are pending fees
		boolean hasPendingFees = fees.stream()
			.anyMatch(fee -> fee.getPendingAmount().compareTo(BigDecimal.ZERO) > 0);

		if (!hasPendingFees) {
			System.out.println("\n‚úÖ All fees are already paid for this student!");
			return;
		}

		// Get payment amount
		System.out.print("\nEnter payment amount: ‚Çπ");
		if (!scanner.hasNextBigDecimal()) {
			System.out.println("‚ùó Please enter a valid amount.");
			scanner.next(); // clear invalid input
			return;
		}

		BigDecimal paymentAmount = scanner.nextBigDecimal();

		if (paymentAmount.compareTo(BigDecimal.ZERO) <= 0) {
			System.out.println("‚ùå Payment amount must be greater than zero.");
			return;
		}

		// Calculate total pending amount
		BigDecimal totalPending = fees.stream()
			.map(Fee::getPendingAmount)
			.reduce(BigDecimal.ZERO, BigDecimal::add);

		if (paymentAmount.compareTo(totalPending) > 0) {
			System.out.println("‚ùå Payment amount (‚Çπ" + paymentAmount + ") cannot exceed pending amount (‚Çπ" + totalPending + ").");
			return;
		}

		// Process payment using new payment module
		PaymentProcessor processor = new PaymentProcessor();
		boolean paymentSuccess = processor.process(studentId, paymentAmount);

		if (paymentSuccess) {
			System.out.println("\n‚úÖ Payment of ‚Çπ" + paymentAmount + " processed successfully!");
			System.out.println("Updated fee status:");

			// Show updated fee status
			List<Fee> updatedFees = feeService.getFeesByStudent(studentId);
			Fee.printHeader();
			for (Fee fee : updatedFees) {
				System.out.println(fee);
			}
		} else {
			System.out.println("‚ùå Payment failed. Please try again.");
		}
	}


	// Helper: Print students in tabular format
	private void printStudents(List<Student> students) {
		System.out.printf("\n%-10s %-20s %-25s %-10s\n", "Student ID", "Name", "Email", "GR Number");
		System.out.println("-------------------------------------------------------------");
		for (Student s : students) {
			System.out.printf("%-10d %-20s %-25s %-10d\n", 
				s.getStudent_id(), s.getName(), s.getEmail(), s.getGr_number());
		}
	}

	// Helper: Print courses in tabular format
	private void printCourses(List<Course> courses) {
		System.out.printf("\n%-10s %-25s %-20s %-15s\n", "Course ID", "Course Name", "No. of Semesters", "Total Fee");
		System.out.println("-------------------------------------------------------------");
		for (Course c : courses) {
			String totalFee = (c.getTotal_fee() != null) ? "‚Çπ" + c.getTotal_fee() : "N/A";
			System.out.printf("%-10d %-25s %-20d %-15s\n", c.getCourse_id(), c.getCourse_name(), c.getNo_of_semester(), totalFee);
		}
	}
}
