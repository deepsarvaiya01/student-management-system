package com.sms.controller;

public class StudentController {

	private StudentService studentService;
	Scanner scanner = new Scanner(System.in);

	public StudentController() throws SQLException {
		super();
		this.studentService = new StudentService();
	}

	public void viewAllStudents() {
		List<Student> students = studentService.readAllStudent();

		for (Student student : students) {
			System.out.println("Student ID: " + student.getStudent_id() + " | " + "Name: " + student.getName() + " | "
					+ "Age: " + student.getAge() + " | " + "Email: " + student.getEmail() + " | " + "GR No: "
					+ student.getGr_number());
		}
	}

	public void addNewStudent() {
		System.out.println("Enter Student Name:");
		String name = scanner.nextLine();

		System.out.println("Enter GR Number:");
		int grNumber = scanner.nextInt();
		System.out.println("Enter Email:");
		String email = scanner.next();
		System.out.println("Enter City:");
		String city = scanner.next();
		System.out.println("Enter Mobile No:");
		String mobileNo = scanner.next();
		System.out.println("Enter Age:");
		int age = scanner.nextInt();

		System.out.println("Available Courses:");
		List<Course> courses = studentService.getAllCourses();
		for (Course course : courses) {
			System.out.println("Course ID: " + course.getCourse_id() + " | Name: " + course.getCourse_name()
					+ " | No. of Semesters: " + course.getNo_of_semester());
		}
		System.out.print("Enter Course ID to assign: ");
		int courseId = scanner.nextInt();

		Student student = new Student();
		student.setName(name);
		student.setGr_number(grNumber);
		student.setEmail(email);
		student.setCity(city);
		student.setMobile_no(mobileNo);
		student.setAge(age);

		boolean success = studentService.addStudentWithProfileAndCourse(student, courseId);
		if (success) {
			System.out.println("Student, profile, and course assignment added successfully.");
		} else {
			System.out.println("Failed to add student. Please check your input and try again.");
		}
	}

	public void assignCourse() {
		System.out.print("Enter Student ID to assign a course: ");
		int studentId = scanner.nextInt();
		Student student = studentService.searchStudentById(studentId);
		if (student == null) {
			System.out.println("Student not found with ID: " + studentId);
			return;
		}
		System.out.println("Available Courses:");
//        List<Course> courses = studentService.getAllCourses();
//        for (Course course : courses) {
//            System.out.println("Course ID: " + course.getCourse_id() + " | Name: " + course.getCourse_name() + " | No. of Semesters: " + course.getNo_of_semester());
//        }
		System.out.print("Enter Course ID to assign: ");
		int courseId = scanner.nextInt();
		boolean success = studentService.assignCourseToStudent(studentId, courseId);
		if (success) {
			System.out.println("Course assigned successfully.");
		} else {
			System.out.println("Failed to assign course. It may already be assigned or an error occurred.");
		}
	}

	public void viewAllCourses() {

		System.out.println("Enter A Student ID:");
		int studentId = scanner.nextInt();

		List<Course> courses = studentService.readAllCourses(studentId);
		for (Course course : courses) {
			System.out.println("Course ID: " + course.getCourse_id() + " | " + "Name: " + course.getCourse_name()
					+ " | " + "No. of Semesters: " + course.getNo_of_semester());
		}
	}

	public void searchStudent() {
		System.out.print("Enter Student ID to search: ");
		int studentId = scanner.nextInt();
		Student student = studentService.searchStudentById(studentId);
		if (student != null) {
			System.out.println("Student found:");
			System.out.println("Student ID: " + student.getStudent_id());
			System.out.println("Name: " + student.getName());
			System.out.println("Age: " + student.getAge());
			System.out.println("GR No: " + student.getGr_number());
			System.out.println("Email: " + student.getEmail());
			System.out.println("City: " + student.getCity());
			System.out.println("Mobile No: " + student.getMobile_no());
		} else {
			System.out.println("Student not found with ID: " + studentId);
		}
	}

	public void deleteStudent() {
		System.out.print("Enter Student ID to delete: ");
		int studentId = scanner.nextInt();
		boolean deleted = studentService.deleteStudentById(studentId);
		if (deleted) {
			System.out.println("Student and all related records deleted successfully.");
		} else {
			System.out.println("Failed to delete student. Please check the ID and try again.");
		}
	}

}
